// @GLOBAL.SOURCE@ : IDL source the server
//
// Generated by the Visual Fortran COM Server Wizard on
// @GLOBAL.DATE@ at @GLOBAL.TIME@.
//
//  DO NOT EDIT THIS FILE!
//
// This file is re-generated every time the object hierarchy is changed.
//

// This file will be processed by the MIDL tool to
// produce the type library and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

@#PER CLASS
// Interfaces for @CLASS.NAME@
@#PER INTERFACE
@#IFTRUE SYSTEMDEFINEDIDL
@#ELSE
[
    object,
    uuid(@(IID := GUIDGEN()@)@INTERFACE.IID@)@[,
    helpstring("@INTERFACE.HELPSTRING@")@]@#IFTRUE OLEAUTOMATION ,
    oleautomation@#ENDIF @#IFTRUE DUAL ,
    dual@#ENDIF
]
interface @INTERFACE.NAME@ : @#IFTRUE DUAL IDispatch @#ELSE IUnknown @#ENDIF
{
    @#PER METHOD
	@#IFTRUE PROPERTY
    @[[@(= IDLMethodAttr(INTERFACE.DUAL, METHOD.AUTOID, METHOD.PROPERTY, METHOD.PROPINTENT, METHOD.HELPSTRING)@)]@] HRESULT @(= GetPropName(METHOD.NAME)@) (
	@#ELSE
    @[[@(= IDLMethodAttr(INTERFACE.DUAL, METHOD.AUTOID, METHOD.PROPERTY, METHOD.PROPINTENT, METHOD.HELPSTRING)@)]@] HRESULT @METHOD.NAME@ (
	@#ENDIF
        @#PER ARGUMENT @(= IDLDataType2(ARGUMENT.IDLDATATYPE, ARGUMENT.INTENT, ARGUMENT.ARRAY, ARGUMENT.OPTIONAL, ARGUMENT.RETVAL, ARGUMENT.BYREF)@) @ARGUMENT.NAME@@#PERPOSTFIX ",
        "@#ENDPER );
    @#ENDPER
};
@#ENDIF
@#ENDPER
@#ENDPER

// Type library defintion
[
    uuid(@GLOBAL.TYPELIB_ID@),
    version(@{@GLOBAL.TYPELIB_VERSION@@|1.0@}),
    helpstring("@CLASS.NAME@ @{@GLOBAL.TYPELIB_VERSION@@|1.0@} Type Library")
]
library @CLASS.NAME@Lib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    @#PER CLASS
    [
        uuid(@(CLSID := GUIDGEN()@)@CLASS.CLSID@),
        @[helpstring("@CLASS.HELPSTRING@")@]
    ]
    coclass @CLASS.NAME@
    {
        @#PER INTERFACE
        @#IFTRUE DEFAULT [default] @#ENDIF interface @INTERFACE.NAME@;
        @#ENDPER
    };
    @#ENDPER
};
